import{_ as l,r as t,o as h,c as r,a as e,e as i,b as s,d as n}from"./app-DFGfNfkv.js";const o={},c=e("h1",{id:"go语言相关",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#go语言相关"},[e("span",null,"Go语言相关")])],-1),g=e("p",null,[i("!> "),e("strong",null,"Golang"),i("相关的面试题")],-1),d={href:"https://github.com/KeKe-Li/data-structures-questions/blob/master/src/chapter05/golang.01.md#Go%E4%B8%AD%E5%AF%B9nil%E7%9A%84Slice%E5%92%8C%E7%A9%BASlice%E7%9A%84%E5%A4%84%E7%90%86%E6%98%AF%E4%B8%80%E8%87%B4%E7%9A%84%E5%90%97",target:"_blank",rel:"noopener noreferrer"},p=n('<h2 id="基本数据结构" tabindex="-1"><a class="header-anchor" href="#基本数据结构"><span>基本数据结构</span></a></h2><h3 id="数组未初始化能不能求len" tabindex="-1"><a class="header-anchor" href="#数组未初始化能不能求len"><span>数组未初始化能不能求len</span></a></h3><p>!&gt; 这里没有初始化的意思就是没有赋值 <strong>可以，例如 <code>var a [5]int</code> 将会赋对应类型的零值</strong></p><h3 id="未初始化的slice能不能append" tabindex="-1"><a class="header-anchor" href="#未初始化的slice能不能append"><span>未初始化的slice能不能append</span></a></h3><p>!&gt; 可以，未初始化只是一个为长度和容量都为0的一个切片，使用append将会触发扩容机制 注意：切片未只是声明并未初始化，如<code>var a []int</code>，相当于一个nil，可以直接append进行追加元素，将会触发扩容</p><h3 id="go数组和slice的区别" tabindex="-1"><a class="header-anchor" href="#go数组和slice的区别"><span>go数组和slice的区别</span></a></h3><ol><li>数组定长，定义的时候就需要确定。切片长度不定，append时会自动扩容</li><li>相同大小数组可以赋值，会拷贝全部内容。slice赋值和指针一样。数组和slice之间不能相互赋值。当然slice有自己的copy函数</li><li>数组也可以进行切片，返回值是一个slice，改变slice时会同步修改数组内容，相当于取得了这个数组的指针</li><li>slice 的底层数据是数组，slice 是对数组的封装，它描述一个数组的片段。两者都可以通过下标来访问单个元素。</li><li>切片的类型和长度无关，而数组的长度是数组类型的一部分。</li></ol>',7),k={href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-array/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-array-and-slice/#323-%E8%AE%BF%E9%97%AE%E5%85%83%E7%B4%A0",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zhuanlan.zhihu.com/p/341945051",target:"_blank",rel:"noopener noreferrer"},b={href:"https://mp.weixin.qq.com/s/MTZ0C9zYsNrb8wyIm2D8BA",target:"_blank",rel:"noopener noreferrer"},f=e("h3",{id:"nil-slice-和-empty-slice区别",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#nil-slice-和-empty-slice区别"},[e("span",null,"nil slice 和 empty slice区别")])],-1),y=e("blockquote",null,[e("p",null,"empty slice用法：当我们查询或者处理一个空的列表的时候，这非常有用，它会告诉我们返回的是一个列表，但是列表内没有任何值。")],-1),v=e("ol",null,[e("li",null,[e("strong",null,"当我们使用json序列化nil slice的时候将会序列化成null，但是序列化empty slice的时候将会序列化后才能一个[]")]),e("li",null,"总之，nil slice 和 empty slice是不同的东西,需要我们加以区分的.")],-1),_=e("div",{class:"language-go line-numbers-mode","data-ext":"go","data-title":"go"},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code","v-pre":""},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"package"),e("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," main")]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"import"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," (")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B5695999","--shiki-dark":"#C98A7D99"}},'	"'),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"encoding/json"),e("span",{style:{"--shiki-light":"#B5695999","--shiki-dark":"#C98A7D99"}},'"')]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B5695999","--shiki-dark":"#C98A7D99"}},'	"'),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"fmt"),e("span",{style:{"--shiki-light":"#B5695999","--shiki-dark":"#C98A7D99"}},'"')]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"/**")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," * @Author: yirufeng")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," * @Date: 2021/2/16 8:46 上午")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," * @Desc:")]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"empty slice用法：当我们查询或者处理一个空的列表的时候，这非常有用，它会告诉我们返回的是一个列表，但是列表内没有任何值。")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," **/")]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"type"),e("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," Student"),e("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," struct"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	Id"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"   []"),e("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"int")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	Name"),e("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," string")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"func"),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," main"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"	var"),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," a"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," []"),e("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"int")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	b"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," :="),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," []"),e("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"int"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"{}")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	aByte"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},","),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," _"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," :="),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," json"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"Marshal"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"a"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	fmt"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"Println"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"string"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"aByte"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"))"),e("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," //null")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	bByte"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},","),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," _"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," :="),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," json"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"Marshal"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"b"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	fmt"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"Println"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"string"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"bByte"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"))"),e("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," //[]")]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	c"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," :="),e("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," Student"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"{")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"		Name"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":"),e("span",{style:{"--shiki-light":"#B5695999","--shiki-dark":"#C98A7D99"}},' "'),e("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"123"),e("span",{style:{"--shiki-light":"#B5695999","--shiki-dark":"#C98A7D99"}},'"'),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},",")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"	}")]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	d"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," :="),e("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," Student"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"{")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"		Id"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"   []"),e("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"int"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"{},")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"		Name"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":"),e("span",{style:{"--shiki-light":"#B5695999","--shiki-dark":"#C98A7D99"}},' "'),e("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"123"),e("span",{style:{"--shiki-light":"#B5695999","--shiki-dark":"#C98A7D99"}},'"'),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},",")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"	}")]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	cByte"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},","),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," _"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," :="),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," json"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"Marshal"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"c"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	fmt"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"Println"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"string"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"cByte"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"))"),e("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},' //{"Id":null,"Name":"123"}')]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	dByte"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},","),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," _"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," :="),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," json"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"Marshal"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"d"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"	fmt"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),e("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"Println"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"string"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"dByte"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"))"),e("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},' //{"Id":[],"Name":"123"}')]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),A=e("h3",{id:"slice底层实现",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#slice底层实现"},[e("span",null,"slice底层实现")])],-1),D={href:"https://jiajunhuang.com/articles/2020_05_23-go_slice.md.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://jiajunhuang.com/articles/2017_07_18-golang_slice.md.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-array-and-slice/#323-%E8%AE%BF%E9%97%AE%E5%85%83%E7%B4%A0",target:"_blank",rel:"noopener noreferrer"},w={href:"https://zhuanlan.zhihu.com/p/341945051",target:"_blank",rel:"noopener noreferrer"},E={href:"https://mp.weixin.qq.com/s/MTZ0C9zYsNrb8wyIm2D8BA",target:"_blank",rel:"noopener noreferrer"},G=e("p",null,"类似问题：slice的底层原理 类似问题：切片怎么扩容,扩容过程中需不需要重新写入",-1),j=e("h3",{id:"map的底层原理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#map的底层原理"},[e("span",null,"map的底层原理")])],-1),I={href:"https://jiajunhuang.com/articles/2017_07_27-golang_map.md.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://zhuanlan.zhihu.com/p/341945051",target:"_blank",rel:"noopener noreferrer"},M={href:"https://mp.weixin.qq.com/s/2CDpE5wfoiNXm1agMAq4wA",target:"_blank",rel:"noopener noreferrer"},P=e("h3",{id:"map是线程安全的吗-怎么解决并发安全问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#map是线程安全的吗-怎么解决并发安全问题"},[e("span",null,"Map是线程安全的吗？怎么解决并发安全问题")])],-1),T={href:"https://jiajunhuang.com/articles/2017_07_27-golang_map.md.html",target:"_blank",rel:"noopener noreferrer"},N=e("h3",{id:"go-常见数据结构",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#go-常见数据结构"},[e("span",null,"go 常见数据结构")])],-1),F={href:"https://zhuanlan.zhihu.com/p/341945051",target:"_blank",rel:"noopener noreferrer"},z=n('<h3 id="slice、map都是安全的吗" tabindex="-1"><a class="header-anchor" href="#slice、map都是安全的吗"><span>Slice、map都是安全的吗</span></a></h3><blockquote><p>slice与map都不是线程安全的</p></blockquote><h3 id="golang中的-map-以及-slice-的源码分析以及slice内存泄漏-需要了解什么是内存泄漏" tabindex="-1"><a class="header-anchor" href="#golang中的-map-以及-slice-的源码分析以及slice内存泄漏-需要了解什么是内存泄漏"><span>Golang中的 map 以及 slice 的源码分析以及slice内存泄漏，需要了解什么是内存泄漏</span></a></h3><h3 id="线程安全的map锁分段的细节" tabindex="-1"><a class="header-anchor" href="#线程安全的map锁分段的细节"><span>线程安全的map锁分段的细节</span></a></h3><hr><h2 id="channel-管道" tabindex="-1"><a class="header-anchor" href="#channel-管道"><span>channel 管道</span></a></h2>',6),K={href:"https://mp.weixin.qq.com/s/90Evbi5F5sA1IM5Ya5Tp8w",target:"_blank",rel:"noopener noreferrer"},S=e("h3",{id:"channel-有缓冲-无缓冲",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#channel-有缓冲-无缓冲"},[e("span",null,"channel 有缓冲 无缓冲")])],-1),R={href:"https://www.flysnow.org/2017/04/17/go-in-action-go-channel.html",target:"_blank",rel:"noopener noreferrer"},H=n('<ol><li>注意点：如果一个通道被关闭了，我们就不能往这个通道里发送数据了，如果发送的话，会引起painc异常。但是，我们还可以接收通道里的数据，如果通道里没有数据的话，接收的数据是零值.</li><li>无缓冲的通道指的是通道的大小为0，也就是说，这种类型的通道在接收前没有能力保存任何值，它要求发送goroutine和接收goroutine同时准备好，才可以完成发送和接收操作。</li><li>从上面无缓冲的通道定义来看，发送goroutine和接收gouroutine必须是同步的，同时准备后，如果没有同时准备好的话，先执行的操作就会阻塞等待，直到另一个相对应的操作准备好为止。这种无缓冲的通道我们也称之为同步通道。</li><li>有缓冲通道内部有一个类似于队列机制的缓冲区，定义的时候通过make的第2个参数指定缓冲区大小，如果容量满了，接收将会阻塞，如果缓冲区空，发送将会阻塞。</li><li>如果给定了一个缓冲区容量，那么通道就是异步的，只要缓冲区有未使用空间用于发送数据，或还包含可以接收的数据，那么其通信就会无阻塞地进行 类似问题： go的channel 有缓冲无缓冲如何定义，区别</li></ol><h3 id="关闭channel读取后会怎样" tabindex="-1"><a class="header-anchor" href="#关闭channel读取后会怎样"><span>关闭channel读取后会怎样</span></a></h3><h3 id="golang中channel调用问题" tabindex="-1"><a class="header-anchor" href="#golang中channel调用问题"><span>golang中channel调用问题</span></a></h3><h3 id="go-同步-channel的实现" tabindex="-1"><a class="header-anchor" href="#go-同步-channel的实现"><span>go 同步，channel的实现</span></a></h3><hr><h2 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏"><span>内存泄漏</span></a></h2><h3 id="goroutine内存泄漏场景" tabindex="-1"><a class="header-anchor" href="#goroutine内存泄漏场景"><span>goroutine内存泄漏场景</span></a></h3>',7),W={href:"https://blog.csdn.net/leeright/article/details/94466831",target:"_blank",rel:"noopener noreferrer"},L=e("img",{src:"https://cdn.jsdelivr.net/gh/sivanWu0222/ImageHosting@master/uPic/IR4yAK.png",alt:"IR4yAK"},null,-1),O={href:"https://mp.weixin.qq.com/s/90Evbi5F5sA1IM5Ya5Tp8w",target:"_blank",rel:"noopener noreferrer"},V=e("h3",{id:"go中导致内存泄漏的原因",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#go中导致内存泄漏的原因"},[e("span",null,"go中导致内存泄漏的原因")])],-1),Y=e("img",{src:"https://cdn.jsdelivr.net/gh/sivanWu0222/ImageHosting@master/uPic/IR4yAK.png",alt:"IR4yAK"},null,-1),Z={href:"https://mp.weixin.qq.com/s/90Evbi5F5sA1IM5Ya5Tp8w",target:"_blank",rel:"noopener noreferrer"},J=e("h3",{id:"了解内存泄漏吗-有什么危害",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#了解内存泄漏吗-有什么危害"},[e("span",null,"了解内存泄漏吗？有什么危害？")])],-1),Q=e("img",{src:"https://cdn.jsdelivr.net/gh/sivanWu0222/ImageHosting@master/uPic/IR4yAK.png",alt:"IR4yAK"},null,-1),U={href:"https://mp.weixin.qq.com/s/90Evbi5F5sA1IM5Ya5Tp8w",target:"_blank",rel:"noopener noreferrer"},X=e("h3",{id:"go-内存分配",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#go-内存分配"},[e("span",null,"go 内存分配")])],-1),$={href:"https://github.com/KeKe-Li/data-structures-questions",target:"_blank",rel:"noopener noreferrer"},ee=e("hr",null,null,-1),ie=e("h2",{id:"协程与并发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#协程与并发"},[e("span",null,"协程与并发")])],-1),ae=e("h3",{id:"golang中哪些方式可以安全读写共享变量",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#golang中哪些方式可以安全读写共享变量"},[e("span",null,"Golang中哪些方式可以安全读写共享变量")])],-1),se=e("li",null,"加互斥锁或读写锁",-1),ne={href:"https://studygolang.com/articles/17835?fr=sidebar",target:"_blank",rel:"noopener noreferrer"},le={href:"https://www.bilibili.com/read/cv5694992/",target:"_blank",rel:"noopener noreferrer"},te=e("h3",{id:"go并发为什么快",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#go并发为什么快"},[e("span",null,"go并发为什么快")])],-1),he={href:"https://zhuanlan.zhihu.com/p/111346689",target:"_blank",rel:"noopener noreferrer"},re=e("h3",{id:"go协程-java线程区别",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#go协程-java线程区别"},[e("span",null,"go协程 java线程区别")])],-1),oe=e("h3",{id:"sync-once的实现原理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#sync-once的实现原理"},[e("span",null,"sync.Once的实现原理")])],-1),ce=e("p",null,"!>（上次哔哩哔哩面试问到了，幸亏我事后看了一眼是类似双重检验锁的实现方式哦），让我写出来，我写出了一大半，还让我运行一下，我运行不出来",-1),ge={href:"https://mp.weixin.qq.com/s/gT9bNsNhU189PsURJyzsmQ",target:"_blank",rel:"noopener noreferrer"},de=n('<h3 id="context包有没有用过-我说没用过" tabindex="-1"><a class="header-anchor" href="#context包有没有用过-我说没用过"><span>context包有没有用过，我说没用过</span></a></h3><h3 id="sync-map-怎么解决线程安全问题-看过源码吗" tabindex="-1"><a class="header-anchor" href="#sync-map-怎么解决线程安全问题-看过源码吗"><span>sync.Map 怎么解决线程安全问题？看过源码吗？</span></a></h3><h3 id="golang-的-waitgroup-用法" tabindex="-1"><a class="header-anchor" href="#golang-的-waitgroup-用法"><span>golang 的 waitGroup 用法</span></a></h3><h3 id="go的协程可以不可以自己让出cpu" tabindex="-1"><a class="header-anchor" href="#go的协程可以不可以自己让出cpu"><span>Go的协程可以不可以自己让出cpu</span></a></h3><h3 id="go的协程可以只挂在一个线程上面吗" tabindex="-1"><a class="header-anchor" href="#go的协程可以只挂在一个线程上面吗"><span>Go的协程可以只挂在一个线程上面吗</span></a></h3><h3 id="一个协程挂起换入另外一个协程是什么过程" tabindex="-1"><a class="header-anchor" href="#一个协程挂起换入另外一个协程是什么过程"><span>一个协程挂起换入另外一个协程是什么过程？</span></a></h3><h3 id="有一个高并发的场景该怎么处理" tabindex="-1"><a class="header-anchor" href="#有一个高并发的场景该怎么处理"><span>有一个高并发的场景该怎么处理</span></a></h3><h3 id="golang-协程机制" tabindex="-1"><a class="header-anchor" href="#golang-协程机制"><span>golang 协程机制</span></a></h3><h3 id="协程的栈空间大小有限制吗-会主动扩展吗" tabindex="-1"><a class="header-anchor" href="#协程的栈空间大小有限制吗-会主动扩展吗"><span>协程的栈空间大小有限制吗？会主动扩展吗？</span></a></h3><h3 id="golang-context-应用场景" tabindex="-1"><a class="header-anchor" href="#golang-context-应用场景"><span>golang context 应用场景</span></a></h3><h3 id="context-的数据结构-树" tabindex="-1"><a class="header-anchor" href="#context-的数据结构-树"><span>context 的数据结构（树）</span></a></h3><h3 id="go-协程" tabindex="-1"><a class="header-anchor" href="#go-协程"><span>go 协程</span></a></h3><h3 id="go-协程怎么切换的" tabindex="-1"><a class="header-anchor" href="#go-协程怎么切换的"><span>go 协程怎么切换的</span></a></h3><h3 id="golang-的协程与-java-线程的区别" tabindex="-1"><a class="header-anchor" href="#golang-的协程与-java-线程的区别"><span>Golang 的协程与 Java 线程的区别？</span></a></h3><p>协程是轻量级线程，多个协程可以由一个或多个线程管理。 协程无需上下文切换，没有线程之间切换的开销。 协程的调度不需要多线程的锁机制，因为只有一个线程，不存在同时写变量冲突，执行效率比多线程高很多。 这题面试的时候没有答到第三点。</p><h3 id="golang-的协程间通讯方式有哪些" tabindex="-1"><a class="header-anchor" href="#golang-的协程间通讯方式有哪些"><span>Golang 的协程间通讯方式有哪些？</span></a></h3><p>共享内存和协程通信。 「Don’t communicate by sharing memory, share memory by communicating」所以更提倡使用 channel 进行通信。 当时答的时候也只答了 channel，面试官说还有一种，怎么都想不起来Orz。</p><h3 id="go里面一个协程能保证绑定在一个内核线程上面的。" tabindex="-1"><a class="header-anchor" href="#go里面一个协程能保证绑定在一个内核线程上面的。"><span>Go里面一个协程能保证绑定在一个内核线程上面的。</span></a></h3><h3 id="go多线程" tabindex="-1"><a class="header-anchor" href="#go多线程"><span>go多线程</span></a></h3><h3 id="golang协程i-o多路复用机制" tabindex="-1"><a class="header-anchor" href="#golang协程i-o多路复用机制"><span>golang协程i/o多路复用机制</span></a></h3><hr><h2 id="gmp与垃圾回收" tabindex="-1"><a class="header-anchor" href="#gmp与垃圾回收"><span>GMP与垃圾回收</span></a></h2><h3 id="go垃圾回收" tabindex="-1"><a class="header-anchor" href="#go垃圾回收"><span>go垃圾回收</span></a></h3><h3 id="go-gmp-调度-4次" tabindex="-1"><a class="header-anchor" href="#go-gmp-调度-4次"><span>go gmp 调度 4次</span></a></h3><h3 id="go-垃圾回收-什么时候触发-2次" tabindex="-1"><a class="header-anchor" href="#go-垃圾回收-什么时候触发-2次"><span>go 垃圾回收，什么时候触发 2次</span></a></h3><h3 id="gmp源码级别分析" tabindex="-1"><a class="header-anchor" href="#gmp源码级别分析"><span>GMP源码级别分析</span></a></h3><h3 id="go-内存逃逸分析-分析了栈帧-讲五种例子-描述堆栈优缺点-点头" tabindex="-1"><a class="header-anchor" href="#go-内存逃逸分析-分析了栈帧-讲五种例子-描述堆栈优缺点-点头"><span>go 内存逃逸分析（分析了栈帧，讲五种例子，描述堆栈优缺点，点头）</span></a></h3><hr><h2 id="性能问题排查" tabindex="-1"><a class="header-anchor" href="#性能问题排查"><span>性能问题排查</span></a></h2><h3 id="golang-性能问题怎么排查-profile" tabindex="-1"><a class="header-anchor" href="#golang-性能问题怎么排查-profile"><span>golang 性能问题怎么排查？（profile）</span></a></h3><h3 id="项目调试-讲了下gdb" tabindex="-1"><a class="header-anchor" href="#项目调试-讲了下gdb"><span>项目调试（讲了下GDB）</span></a></h3><h3 id="gdb" tabindex="-1"><a class="header-anchor" href="#gdb"><span>gdb</span></a></h3><hr><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><h3 id="defer-recover-的问题-自己了解不多-简单介绍" tabindex="-1"><a class="header-anchor" href="#defer-recover-的问题-自己了解不多-简单介绍"><span>defer recover 的问题（自己了解不多，简单介绍）</span></a></h3><h3 id="go-defer" tabindex="-1"><a class="header-anchor" href="#go-defer"><span>go defer</span></a></h3><h3 id="defer的执行顺序" tabindex="-1"><a class="header-anchor" href="#defer的执行顺序"><span>defer的执行顺序</span></a></h3><h3 id="defer-a-defer-b-defer-panic-a和b能不能执行到" tabindex="-1"><a class="header-anchor" href="#defer-a-defer-b-defer-panic-a和b能不能执行到"><span>defer A ; defer B ; defer panic(&quot;&quot;) A和B能不能执行到</span></a></h3><h3 id="defer-recover-panic-执行顺序" tabindex="-1"><a class="header-anchor" href="#defer-recover-panic-执行顺序"><span>defer recover panic 执行顺序</span></a></h3><hr><h2 id="go相关的其他问题" tabindex="-1"><a class="header-anchor" href="#go相关的其他问题"><span>go相关的其他问题</span></a></h2><h3 id="go怎样实现继承" tabindex="-1"><a class="header-anchor" href="#go怎样实现继承"><span>go怎样实现继承</span></a></h3><h3 id="逃逸分析讲一下" tabindex="-1"><a class="header-anchor" href="#逃逸分析讲一下"><span>逃逸分析讲一下</span></a></h3><h3 id="socket" tabindex="-1"><a class="header-anchor" href="#socket"><span>socket</span></a></h3><h3 id="copy是操作符还是内置函数" tabindex="-1"><a class="header-anchor" href="#copy是操作符还是内置函数"><span>copy是操作符还是内置函数</span></a></h3><blockquote><p>内置函数</p></blockquote>',46),pe={href:"https://studygolang.com/pkgdoc",target:"_blank",rel:"noopener noreferrer"},ke=n('<h3 id="一道很简单的go题目-go怎么做深拷贝。" tabindex="-1"><a class="header-anchor" href="#一道很简单的go题目-go怎么做深拷贝。"><span>一道很简单的Go题目，Go怎么做深拷贝。</span></a></h3><ol><li>深拷贝（Deep Copy）：拷贝的是数据本身，创造一个样的新对象，新创建的对象与原对象不共享内存，新创建的对象在内存中开辟一个新的内存地址，新对象值修改时不会影响原对象值。既然内存地址不同，释放内存地址时，可分别释放。值类型的数据，默认全部都是深复制，Array、Int、String、Struct、Float，Bool。</li><li>浅拷贝（Shallow Copy）：拷贝的是数据地址，只复制指向的对象的指针，此时新对象和老对象指向的内存地址是一样的，新对象值修改时老对象也会变化。释放内存地址时，同时释放内存地址。引用类型的数据，默认全部都是浅复制，Slice，Map。</li></ol><h3 id="golang有什么设计很巧妙的地方吗-举几个例子。" tabindex="-1"><a class="header-anchor" href="#golang有什么设计很巧妙的地方吗-举几个例子。"><span>golang有什么设计很巧妙的地方吗，举几个例子。</span></a></h3><h3 id="实现string-拷贝构造-主要内存开辟析构-没答好" tabindex="-1"><a class="header-anchor" href="#实现string-拷贝构造-主要内存开辟析构-没答好"><span>实现string ，拷贝构造，主要内存开辟析构（没答好)</span></a></h3><h3 id="go语言的性能的优劣" tabindex="-1"><a class="header-anchor" href="#go语言的性能的优劣"><span>go语言的性能的优劣</span></a></h3><h3 id="golang-的默认参数传递方式以及哪些是引用传递" tabindex="-1"><a class="header-anchor" href="#golang-的默认参数传递方式以及哪些是引用传递"><span>Golang 的默认参数传递方式以及哪些是引用传递？</span></a></h3><p>默认采用值传递，且Go 中函数传参仅有值传递一种方式。 slice、map、channel 都是引用类型。 slice 能够通过函数传参后，修改对应的数组值，因为 slice 内部保存了引用数组的指针，并不是因为引用传递。 这题回答的时候以为有引用传递，答了 slice、map、channel 都是引用传递，结果一百度，发现是用起来像引用传递，其实都是值传递，就像 slice 传递的是指针的复制。</p><h3 id="go相关知识点-内存分配、go优缺点、go错误处理有什么优缺点" tabindex="-1"><a class="header-anchor" href="#go相关知识点-内存分配、go优缺点、go错误处理有什么优缺点"><span>go相关知识点（内存分配、go优缺点、go错误处理有什么优缺点）</span></a></h3><h2 id="一个go源码级别的仓库讲解-https-github-com-bereborn-learn-blob-master-go-go-e5-86-85-e5-ad-98-e5-88-86-e9-85-8d-c" tabindex="-1"><a class="header-anchor" href="#一个go源码级别的仓库讲解-https-github-com-bereborn-learn-blob-master-go-go-e5-86-85-e5-ad-98-e5-88-86-e9-85-8d-c"><span>一个GO源码级别的仓库讲解：https://github.com/bereborn/learn/blob/master/go/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.c</span></a></h2><h2 id="框架问题" tabindex="-1"><a class="header-anchor" href="#框架问题"><span>框架问题</span></a></h2><h3 id="gin框架如何实现-我说用go内置的net-http包实现的" tabindex="-1"><a class="header-anchor" href="#gin框架如何实现-我说用go内置的net-http包实现的"><span>gin框架如何实现，我说用go内置的net http包实现的</span></a></h3><h3 id="了解中间件吗-有什么好处" tabindex="-1"><a class="header-anchor" href="#了解中间件吗-有什么好处"><span>了解中间件吗?有什么好处</span></a></h3><h3 id="etcd-原理-讲了下raft协议" tabindex="-1"><a class="header-anchor" href="#etcd-原理-讲了下raft协议"><span>etcd 原理（讲了下raft协议）</span></a></h3><h3 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc"><span>RPC</span></a></h3><hr><h2 id="new-和-make区别" tabindex="-1"><a class="header-anchor" href="#new-和-make区别"><span>new 和 make区别</span></a></h2><p>Golang 语言中的内置函数 make 和 new 都是用作变量初始化，但是它们初始化变量的方式不同。关于它们之间的区别，我们可以简述为 make 返回类型是引用类型，new 返回类型是指针类型。本文我们首先分别介绍二者，然后再介绍二者的区别。 02 内置函数 make 关于内置函数 make，官方的介绍是 make 内置函数仅用作分配内存空间并初始化 slice，map 和 chan 类型的对象。与 new 相同，第一个参数是类型，而不是值。与 new 不同，make 的返回类型与其参数的类型相同，而不是指向它的指针。 func make(t Type, size ...IntegerType) Type 返回值取决于传参的类型： Slice s := make([]T, 0, 10) 以上示例代码表示分配一个长度为 10 的底层数组，返回一个长度为 0，容量为 10 的切片。 使用内置函数 make 初始化 slice，第一个参数是类型，第二个参数是 slice 的长度，第三个参数是可选参数，它代表 slice 的容量，如果不传入第三个参数，slice 的容量与长度相同，但是如果传入第三个参数，它的值（容量）比如大于或等于传入的第二个参数（长度）。 Map m := make(map[T]T) 以上示例代码表示给 map 分配内存空间。 使用内置函数 make 初始化 map，传入的参数是类型，map 没有容量限制，初始化时无需指定容量的大小。 Channel c := make(chan T, 10) 以上示例代码表示给 channel 分配的内存空间大小（缓冲容量）为 10。channel 的缓冲区使用指定的值初始化缓冲容量。如果为零或忽略大小(不传入第二个参数)，则 channel 为无缓冲的。 03 内置函数 new 关于内置函数 new，官方介绍是内置函数 new 仅用作分配内存空间，第一个参数是类型，而不是值，返回值是指向新分配该类型的零值的指针。 func new(Type) *Type 在 Golang 开发中，通常不太常用内置函数 new，它的使用场景一般是需要显式返回指针。 04 make 和 new 的区别 在阅读完上述内容后，我相信读者朋友们应该已经了解了二者的区别。 make 仅用于初始化 slice，map 和 chan，new 可用于初始化任意类型。 make 返回值是”引用类型“，new 返回值是指针类型。 05 总结 本文我们介绍了内置函数 make 和 new，并且对比归纳了二者的区别，在 Golang 开发中，内置函数 make 是必用的，因为 slice，map 和 chan，必须使用内置函数 make 初始化，才可以使用；而内置函数 new 并不常用，通常使用场景是需要显式返回指针。</p>',17),ue={href:"https://www.kancloud.cn/aceld/golang/1958307",target:"_blank",rel:"noopener noreferrer"},me=n('<h2 id="为什么要使用-go-语言-go-语言的优势在哪里" tabindex="-1"><a class="header-anchor" href="#为什么要使用-go-语言-go-语言的优势在哪里"><span>为什么要使用 Go 语言？Go 语言的优势在哪里？</span></a></h2><blockquote><p>从自己理解的角度看</p></blockquote><ol><li>代码简单，只有25个关键字，例如每个语句最后不需要加上分号</li><li>跨平台编译，如果你写的Go代码不包含cgo，那么就可以做到window系统编译linux的应用，如何做到的呢？Go引用了plan9的代码，这就是不依赖系统的信息。</li><li>便于部署：指定编译的平台架构以及运行的平台就可以生成对应的二进制文件</li><li>可以支持很大量的并发，因为goroutine占用的内存很小。Go语言的运行环境（runtime）会在goroutine需要的时候动态地分配栈空间，而不是给每个goroutine分配固定大小的内存空间。这样就避免了需要程序员来决定栈的大小。分块式的栈是最初Go语言组织栈的方式。当创建一个goroutine的时候，它会分配一个8KB的内存空间来给goroutine的栈使用。我们可能会考虑当这8KB的栈空间被用完的时候该怎么办?已经用完了分配的栈空间。如果是的话，它会调用morestack函数</li></ol><h2 id="go-func-使用注意点-博大群里面提出的问题" tabindex="-1"><a class="header-anchor" href="#go-func-使用注意点-博大群里面提出的问题"><span>go func 使用注意点：博大群里面提出的问题</span></a></h2><p>cyan： 1.闭包引用 2.多协程竞争（同步原语，比如锁，waitgroup 等等） 3.匿名函数内的遍历是否逃逸</p><p>博大：我总结了一下，欢迎大家补充</p><ol><li>需要关注下是否泄露，泄露的情况有哪些，可以配合uber的leak库检测一下 https://github.com/uber-go/goleak</li><li>要想着检测到泄露要如何优雅地关闭goroutine。</li><li>goroutine的量是否可控 ，这里推荐下潘少的 https://github.com/panjf2000/ants，感兴趣的同学也可以看看其他goroutine pool https://awesome-go.com/#goroutines</li></ol><h2 id="go语言中的坑-泫提出的" tabindex="-1"><a class="header-anchor" href="#go语言中的坑-泫提出的"><span>go语言中的坑 （泫提出的）</span></a></h2><p><img src="https://cdn.jsdelivr.net/gh/sivanWu0222/ImageHosting@master/uPic/1QuwdT.png" alt="1QuwdT"> 还有个坑是 type Node struct{ Val int } var test map[string]Node</p><p>test[&quot;a&quot;] 拿到的Node是不能修改的 即test[&quot;a&quot;].Val = 1 会报错 正确的写法是 var test map[string]*Node</p><p>gc 算法</p><p>深拷贝，浅拷贝</p>',12);function be(fe,ye){const a=t("ExternalLinkIcon");return h(),r("div",null,[c,g,e("p",null,[e("a",d,[i("参考"),s(a)])]),p,e("p",null,[i("类似问题：切片和数组区别和底层 "),e("a",k,[i("参考1"),s(a)]),e("a",u,[i("参考2"),s(a)]),e("a",m,[i("参考"),s(a)]),e("a",b,[i("深度解密Go语言之Slice"),s(a)])]),f,y,v,_,A,e("p",null,[e("a",D,[i("参考1"),s(a)]),e("a",B,[i("参考2"),s(a)]),e("a",x,[i("参考3"),s(a)]),e("a",w,[i("参考"),s(a)]),e("a",E,[i("参考4"),s(a)])]),G,j,e("p",null,[e("a",I,[i("参考1"),s(a)]),e("a",q,[i("参考2"),s(a)]),e("a",C,[i("参考3"),s(a)]),e("a",M,[i("参考4"),s(a)]),i(" 类似问题：go map结构实现，并发安全否")]),P,e("p",null,[i("map不是线程安全的，需要使用sync.Map，可以看"),e("a",T,[i("该文章的最后"),s(a)])]),N,e("p",null,[i("数组，切片，映射，通道，"),e("a",F,[i("所有的讲解参考"),s(a)])]),z,e("p",null,[e("a",K,[i("参考"),s(a)]),i(" channel是线程安全的")]),S,e("p",null,[i("!> "),e("a",R,[i("参考"),s(a)])]),H,e("p",null,[e("a",W,[i("参考"),s(a)]),i(" goroutine泄漏描述：如果你启动了一个 goroutine，但并没有符合预期的退出，直到程序结束，此goroutine才退出，这种情况就是 goroutine 泄露。 "),L,e("a",O,[i("参考"),s(a)])]),V,e("p",null,[Y,e("a",Z,[i("参考"),s(a)])]),J,e("p",null,[Q,e("a",U,[i("参考"),s(a)])]),X,e("p",null,[e("a",$,[i("参考"),s(a)])]),ee,ie,ae,e("ol",null,[se,e("li",null,[i("使用channel进行安全读写共享变量 "),e("a",ne,[i("参考"),s(a)])]),e("li",null,[i("使用原子性操作 "),e("a",le,[i("参考"),s(a)])])]),te,e("p",null,[e("a",he,[i("参考"),s(a)])]),re,oe,ce,e("ol",null,[e("li",null,[e("a",ge,[i("参考"),s(a)])])]),de,e("p",null,[e("a",pe,[i("其他内置函数可以参考golang包中的builtin function"),s(a)])]),ke,e("p",null,[e("a",ue,[i("参考"),s(a)])]),me])}const _e=l(o,[["render",be],["__file","index.html.vue"]]),Ae=JSON.parse(`{"path":"/notes/go/","title":"Go语言相关","lang":"zh-CN","frontmatter":{"description":"Go语言相关 !> Golang相关的面试题 参考 基本数据结构 数组未初始化能不能求len !> 这里没有初始化的意思就是没有赋值 可以，例如 var a [5]int 将会赋对应类型的零值 未初始化的slice能不能append !> 可以，未初始化只是一个为长度和容量都为0的一个切片，使用append将会触发扩容机制 注意：切片未只是声明并未初始...","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"https://yirufeng.top/notes/go/"}],["meta",{"property":"og:title","content":"Go语言相关"}],["meta",{"property":"og:description","content":"Go语言相关 !> Golang相关的面试题 参考 基本数据结构 数组未初始化能不能求len !> 这里没有初始化的意思就是没有赋值 可以，例如 var a [5]int 将会赋对应类型的零值 未初始化的slice能不能append !> 可以，未初始化只是一个为长度和容量都为0的一个切片，使用append将会触发扩容机制 注意：切片未只是声明并未初始..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/sivanWu0222/ImageHosting@master/uPic/IR4yAK.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T06:49:17.000Z"}],["meta",{"property":"article:author","content":"yirufeng"}],["meta",{"property":"article:modified_time","content":"2024-05-12T06:49:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go语言相关\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/sivanWu0222/ImageHosting@master/uPic/IR4yAK.png\\",\\"https://cdn.jsdelivr.net/gh/sivanWu0222/ImageHosting@master/uPic/IR4yAK.png\\",\\"https://cdn.jsdelivr.net/gh/sivanWu0222/ImageHosting@master/uPic/IR4yAK.png\\",\\"https://cdn.jsdelivr.net/gh/sivanWu0222/ImageHosting@master/uPic/1QuwdT.png\\"],\\"dateModified\\":\\"2024-05-12T06:49:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yirufeng\\"}]}"]]},"headers":[{"level":2,"title":"基本数据结构","slug":"基本数据结构","link":"#基本数据结构","children":[{"level":3,"title":"数组未初始化能不能求len","slug":"数组未初始化能不能求len","link":"#数组未初始化能不能求len","children":[]},{"level":3,"title":"未初始化的slice能不能append","slug":"未初始化的slice能不能append","link":"#未初始化的slice能不能append","children":[]},{"level":3,"title":"go数组和slice的区别","slug":"go数组和slice的区别","link":"#go数组和slice的区别","children":[]},{"level":3,"title":"nil slice 和 empty slice区别","slug":"nil-slice-和-empty-slice区别","link":"#nil-slice-和-empty-slice区别","children":[]},{"level":3,"title":"slice底层实现","slug":"slice底层实现","link":"#slice底层实现","children":[]},{"level":3,"title":"map的底层原理","slug":"map的底层原理","link":"#map的底层原理","children":[]},{"level":3,"title":"Map是线程安全的吗？怎么解决并发安全问题","slug":"map是线程安全的吗-怎么解决并发安全问题","link":"#map是线程安全的吗-怎么解决并发安全问题","children":[]},{"level":3,"title":"go 常见数据结构","slug":"go-常见数据结构","link":"#go-常见数据结构","children":[]},{"level":3,"title":"Slice、map都是安全的吗","slug":"slice、map都是安全的吗","link":"#slice、map都是安全的吗","children":[]},{"level":3,"title":"Golang中的 map 以及 slice 的源码分析以及slice内存泄漏，需要了解什么是内存泄漏","slug":"golang中的-map-以及-slice-的源码分析以及slice内存泄漏-需要了解什么是内存泄漏","link":"#golang中的-map-以及-slice-的源码分析以及slice内存泄漏-需要了解什么是内存泄漏","children":[]},{"level":3,"title":"线程安全的map锁分段的细节","slug":"线程安全的map锁分段的细节","link":"#线程安全的map锁分段的细节","children":[]}]},{"level":2,"title":"channel 管道","slug":"channel-管道","link":"#channel-管道","children":[{"level":3,"title":"channel 有缓冲 无缓冲","slug":"channel-有缓冲-无缓冲","link":"#channel-有缓冲-无缓冲","children":[]},{"level":3,"title":"关闭channel读取后会怎样","slug":"关闭channel读取后会怎样","link":"#关闭channel读取后会怎样","children":[]},{"level":3,"title":"golang中channel调用问题","slug":"golang中channel调用问题","link":"#golang中channel调用问题","children":[]},{"level":3,"title":"go 同步，channel的实现","slug":"go-同步-channel的实现","link":"#go-同步-channel的实现","children":[]}]},{"level":2,"title":"内存泄漏","slug":"内存泄漏","link":"#内存泄漏","children":[{"level":3,"title":"goroutine内存泄漏场景","slug":"goroutine内存泄漏场景","link":"#goroutine内存泄漏场景","children":[]},{"level":3,"title":"go中导致内存泄漏的原因","slug":"go中导致内存泄漏的原因","link":"#go中导致内存泄漏的原因","children":[]},{"level":3,"title":"了解内存泄漏吗？有什么危害？","slug":"了解内存泄漏吗-有什么危害","link":"#了解内存泄漏吗-有什么危害","children":[]},{"level":3,"title":"go 内存分配","slug":"go-内存分配","link":"#go-内存分配","children":[]}]},{"level":2,"title":"协程与并发","slug":"协程与并发","link":"#协程与并发","children":[{"level":3,"title":"Golang中哪些方式可以安全读写共享变量","slug":"golang中哪些方式可以安全读写共享变量","link":"#golang中哪些方式可以安全读写共享变量","children":[]},{"level":3,"title":"go并发为什么快","slug":"go并发为什么快","link":"#go并发为什么快","children":[]},{"level":3,"title":"go协程 java线程区别","slug":"go协程-java线程区别","link":"#go协程-java线程区别","children":[]},{"level":3,"title":"sync.Once的实现原理","slug":"sync-once的实现原理","link":"#sync-once的实现原理","children":[]},{"level":3,"title":"context包有没有用过，我说没用过","slug":"context包有没有用过-我说没用过","link":"#context包有没有用过-我说没用过","children":[]},{"level":3,"title":"sync.Map 怎么解决线程安全问题？看过源码吗？","slug":"sync-map-怎么解决线程安全问题-看过源码吗","link":"#sync-map-怎么解决线程安全问题-看过源码吗","children":[]},{"level":3,"title":"golang 的 waitGroup 用法","slug":"golang-的-waitgroup-用法","link":"#golang-的-waitgroup-用法","children":[]},{"level":3,"title":"Go的协程可以不可以自己让出cpu","slug":"go的协程可以不可以自己让出cpu","link":"#go的协程可以不可以自己让出cpu","children":[]},{"level":3,"title":"Go的协程可以只挂在一个线程上面吗","slug":"go的协程可以只挂在一个线程上面吗","link":"#go的协程可以只挂在一个线程上面吗","children":[]},{"level":3,"title":"一个协程挂起换入另外一个协程是什么过程？","slug":"一个协程挂起换入另外一个协程是什么过程","link":"#一个协程挂起换入另外一个协程是什么过程","children":[]},{"level":3,"title":"有一个高并发的场景该怎么处理","slug":"有一个高并发的场景该怎么处理","link":"#有一个高并发的场景该怎么处理","children":[]},{"level":3,"title":"golang 协程机制","slug":"golang-协程机制","link":"#golang-协程机制","children":[]},{"level":3,"title":"协程的栈空间大小有限制吗？会主动扩展吗？","slug":"协程的栈空间大小有限制吗-会主动扩展吗","link":"#协程的栈空间大小有限制吗-会主动扩展吗","children":[]},{"level":3,"title":"golang context 应用场景","slug":"golang-context-应用场景","link":"#golang-context-应用场景","children":[]},{"level":3,"title":"context 的数据结构（树）","slug":"context-的数据结构-树","link":"#context-的数据结构-树","children":[]},{"level":3,"title":"go 协程","slug":"go-协程","link":"#go-协程","children":[]},{"level":3,"title":"go 协程怎么切换的","slug":"go-协程怎么切换的","link":"#go-协程怎么切换的","children":[]},{"level":3,"title":"Golang 的协程与 Java 线程的区别？","slug":"golang-的协程与-java-线程的区别","link":"#golang-的协程与-java-线程的区别","children":[]},{"level":3,"title":"Golang 的协程间通讯方式有哪些？","slug":"golang-的协程间通讯方式有哪些","link":"#golang-的协程间通讯方式有哪些","children":[]},{"level":3,"title":"Go里面一个协程能保证绑定在一个内核线程上面的。","slug":"go里面一个协程能保证绑定在一个内核线程上面的。","link":"#go里面一个协程能保证绑定在一个内核线程上面的。","children":[]},{"level":3,"title":"go多线程","slug":"go多线程","link":"#go多线程","children":[]},{"level":3,"title":"golang协程i/o多路复用机制","slug":"golang协程i-o多路复用机制","link":"#golang协程i-o多路复用机制","children":[]}]},{"level":2,"title":"GMP与垃圾回收","slug":"gmp与垃圾回收","link":"#gmp与垃圾回收","children":[{"level":3,"title":"go垃圾回收","slug":"go垃圾回收","link":"#go垃圾回收","children":[]},{"level":3,"title":"go gmp 调度 4次","slug":"go-gmp-调度-4次","link":"#go-gmp-调度-4次","children":[]},{"level":3,"title":"go 垃圾回收，什么时候触发 2次","slug":"go-垃圾回收-什么时候触发-2次","link":"#go-垃圾回收-什么时候触发-2次","children":[]},{"level":3,"title":"GMP源码级别分析","slug":"gmp源码级别分析","link":"#gmp源码级别分析","children":[]},{"level":3,"title":"go 内存逃逸分析（分析了栈帧，讲五种例子，描述堆栈优缺点，点头）","slug":"go-内存逃逸分析-分析了栈帧-讲五种例子-描述堆栈优缺点-点头","link":"#go-内存逃逸分析-分析了栈帧-讲五种例子-描述堆栈优缺点-点头","children":[]}]},{"level":2,"title":"性能问题排查","slug":"性能问题排查","link":"#性能问题排查","children":[{"level":3,"title":"golang 性能问题怎么排查？（profile）","slug":"golang-性能问题怎么排查-profile","link":"#golang-性能问题怎么排查-profile","children":[]},{"level":3,"title":"项目调试（讲了下GDB）","slug":"项目调试-讲了下gdb","link":"#项目调试-讲了下gdb","children":[]},{"level":3,"title":"gdb","slug":"gdb","link":"#gdb","children":[]}]},{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[{"level":3,"title":"defer recover 的问题（自己了解不多，简单介绍）","slug":"defer-recover-的问题-自己了解不多-简单介绍","link":"#defer-recover-的问题-自己了解不多-简单介绍","children":[]},{"level":3,"title":"go defer","slug":"go-defer","link":"#go-defer","children":[]},{"level":3,"title":"defer的执行顺序","slug":"defer的执行顺序","link":"#defer的执行顺序","children":[]},{"level":3,"title":"defer A ; defer B ; defer panic(\\"\\") A和B能不能执行到","slug":"defer-a-defer-b-defer-panic-a和b能不能执行到","link":"#defer-a-defer-b-defer-panic-a和b能不能执行到","children":[]},{"level":3,"title":"defer recover panic 执行顺序","slug":"defer-recover-panic-执行顺序","link":"#defer-recover-panic-执行顺序","children":[]}]},{"level":2,"title":"go相关的其他问题","slug":"go相关的其他问题","link":"#go相关的其他问题","children":[{"level":3,"title":"go怎样实现继承","slug":"go怎样实现继承","link":"#go怎样实现继承","children":[]},{"level":3,"title":"逃逸分析讲一下","slug":"逃逸分析讲一下","link":"#逃逸分析讲一下","children":[]},{"level":3,"title":"socket","slug":"socket","link":"#socket","children":[]},{"level":3,"title":"copy是操作符还是内置函数","slug":"copy是操作符还是内置函数","link":"#copy是操作符还是内置函数","children":[]},{"level":3,"title":"一道很简单的Go题目，Go怎么做深拷贝。","slug":"一道很简单的go题目-go怎么做深拷贝。","link":"#一道很简单的go题目-go怎么做深拷贝。","children":[]},{"level":3,"title":"golang有什么设计很巧妙的地方吗，举几个例子。","slug":"golang有什么设计很巧妙的地方吗-举几个例子。","link":"#golang有什么设计很巧妙的地方吗-举几个例子。","children":[]},{"level":3,"title":"实现string ，拷贝构造，主要内存开辟析构（没答好)","slug":"实现string-拷贝构造-主要内存开辟析构-没答好","link":"#实现string-拷贝构造-主要内存开辟析构-没答好","children":[]},{"level":3,"title":"go语言的性能的优劣","slug":"go语言的性能的优劣","link":"#go语言的性能的优劣","children":[]},{"level":3,"title":"Golang 的默认参数传递方式以及哪些是引用传递？","slug":"golang-的默认参数传递方式以及哪些是引用传递","link":"#golang-的默认参数传递方式以及哪些是引用传递","children":[]},{"level":3,"title":"go相关知识点（内存分配、go优缺点、go错误处理有什么优缺点）","slug":"go相关知识点-内存分配、go优缺点、go错误处理有什么优缺点","link":"#go相关知识点-内存分配、go优缺点、go错误处理有什么优缺点","children":[]}]},{"level":2,"title":"一个GO源码级别的仓库讲解：https://github.com/bereborn/learn/blob/master/go/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.c","slug":"一个go源码级别的仓库讲解-https-github-com-bereborn-learn-blob-master-go-go-e5-86-85-e5-ad-98-e5-88-86-e9-85-8d-c","link":"#一个go源码级别的仓库讲解-https-github-com-bereborn-learn-blob-master-go-go-e5-86-85-e5-ad-98-e5-88-86-e9-85-8d-c","children":[]},{"level":2,"title":"框架问题","slug":"框架问题","link":"#框架问题","children":[{"level":3,"title":"gin框架如何实现，我说用go内置的net http包实现的","slug":"gin框架如何实现-我说用go内置的net-http包实现的","link":"#gin框架如何实现-我说用go内置的net-http包实现的","children":[]},{"level":3,"title":"了解中间件吗?有什么好处","slug":"了解中间件吗-有什么好处","link":"#了解中间件吗-有什么好处","children":[]},{"level":3,"title":"etcd 原理（讲了下raft协议）","slug":"etcd-原理-讲了下raft协议","link":"#etcd-原理-讲了下raft协议","children":[]},{"level":3,"title":"RPC","slug":"rpc","link":"#rpc","children":[]}]},{"level":2,"title":"new 和 make区别","slug":"new-和-make区别","link":"#new-和-make区别","children":[]},{"level":2,"title":"为什么要使用 Go 语言？Go 语言的优势在哪里？","slug":"为什么要使用-go-语言-go-语言的优势在哪里","link":"#为什么要使用-go-语言-go-语言的优势在哪里","children":[]},{"level":2,"title":"go func 使用注意点：博大群里面提出的问题","slug":"go-func-使用注意点-博大群里面提出的问题","link":"#go-func-使用注意点-博大群里面提出的问题","children":[]},{"level":2,"title":"go语言中的坑 （泫提出的）","slug":"go语言中的坑-泫提出的","link":"#go语言中的坑-泫提出的","children":[]}],"readingTime":{"minutes":13.43,"words":4029},"git":{"updatedTime":1715496557000,"contributors":[{"name":"cvenwu","email":"yirufeng@foxmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/go/README.md","categoryList":[{"type":10003,"name":"notes"},{"type":10005,"name":"go"}]}`);export{_e as comp,Ae as data};
