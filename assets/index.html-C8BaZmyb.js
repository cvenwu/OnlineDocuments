import{_ as e,o as a,c as t,d as n}from"./app-DFGfNfkv.js";const l={},i=n('<h2 id="大数相加-代码题" tabindex="-1"><a class="header-anchor" href="#大数相加-代码题"><span>大数相加（代码题）</span></a></h2><h2 id="布隆过滤器讲一下" tabindex="-1"><a class="header-anchor" href="#布隆过滤器讲一下"><span>布隆过滤器讲一下</span></a></h2><h2 id="海量数据处理-1t大文件-每一行是一个单词-请在4g内存条件下-统计出频次最高的10个单词" tabindex="-1"><a class="header-anchor" href="#海量数据处理-1t大文件-每一行是一个单词-请在4g内存条件下-统计出频次最高的10个单词"><span>海量数据处理：1T大文件，每一行是一个单词，请在4G内存条件下，统计出频次最高的10个单词</span></a></h2><h2 id="海量日志查询某一段时间内的记录" tabindex="-1"><a class="header-anchor" href="#海量日志查询某一段时间内的记录"><span>海量日志查询某一段时间内的记录</span></a></h2><h2 id="算法-口述-一千万个0-100之间的浮点数-找出前100个最大的-不考虑空间复杂度" tabindex="-1"><a class="header-anchor" href="#算法-口述-一千万个0-100之间的浮点数-找出前100个最大的-不考虑空间复杂度"><span>算法（口述）：一千万个0-100之间的浮点数，找出前100个最大的，不考虑空间复杂度</span></a></h2><h2 id="算法题-一千万条数据找最大的前-100-个数据-每个数据都是-0-100-的浮点数-最差时间复杂度以及优化" tabindex="-1"><a class="header-anchor" href="#算法题-一千万条数据找最大的前-100-个数据-每个数据都是-0-100-的浮点数-最差时间复杂度以及优化"><span>算法题：一千万条数据找最大的前 100 个数据（每个数据都是 0-100 的浮点数），最差时间复杂度以及优化</span></a></h2><h2 id="海量数字-范围都是-1-10000-怎么排序" tabindex="-1"><a class="header-anchor" href="#海量数字-范围都是-1-10000-怎么排序"><span>海量数字，范围都是 1～10000，怎么排序？</span></a></h2><blockquote><p>（计数排序）</p></blockquote><h2 id="算法题-千万级别的数据量-实现队列-fifo-如何设计数据结构节省内存空间-数据-链表" tabindex="-1"><a class="header-anchor" href="#算法题-千万级别的数据量-实现队列-fifo-如何设计数据结构节省内存空间-数据-链表"><span>算法题：千万级别的数据量，实现队列 FIFO，如何设计数据结构节省内存空间（数据+ 链表）</span></a></h2><h2 id="提取两个海量-url-数据中的相同值-不准用-hash-分治。" tabindex="-1"><a class="header-anchor" href="#提取两个海量-url-数据中的相同值-不准用-hash-分治。"><span>提取两个海量 url 数据中的相同值，不准用 Hash 分治。</span></a></h2><h2 id="一个上-t-的文本文件-里面很多字符串并且用空格分隔-找到不同的字符串数量" tabindex="-1"><a class="header-anchor" href="#一个上-t-的文本文件-里面很多字符串并且用空格分隔-找到不同的字符串数量"><span>一个上 T 的文本文件，里面很多字符串并且用空格分隔，找到不同的字符串数量</span></a></h2><h2 id="_100m-的内存-100g-的文件-每行只有一个单词-统计频率最高的-20-个单" tabindex="-1"><a class="header-anchor" href="#_100m-的内存-100g-的文件-每行只有一个单词-统计频率最高的-20-个单"><span>100M 的内存，100G 的文件（每行只有一个单词），统计频率最高的 20 个单</span></a></h2><h2 id="假如有一个文件-文件里有100万条url-请给出方法统计出现次数最高的前100条-思路-100组-每组前100条拿出来-归并" tabindex="-1"><a class="header-anchor" href="#假如有一个文件-文件里有100万条url-请给出方法统计出现次数最高的前100条-思路-100组-每组前100条拿出来-归并"><span>假如有一个文件，文件里有100万条url，请给出方法统计出现次数最高的前100条（思路：100组，每组前100条拿出来，归并）</span></a></h2>',13),r=[i];function s(o,h){return a(),t("div",null,r)}const d=e(l,[["render",s],["__file","index.html.vue"]]),p=JSON.parse(`{"path":"/notes/algo/g7iq3601/","title":"大数与海量数据","lang":"zh-CN","frontmatter":{"title":"大数与海量数据","author":"yirufeng","createTime":"2024/05/13 21:22:47","permalink":"/notes/algo/g7iq3601/","description":"大数相加（代码题） 布隆过滤器讲一下 海量数据处理：1T大文件，每一行是一个单词，请在4G内存条件下，统计出频次最高的10个单词 海量日志查询某一段时间内的记录 算法（口述）：一千万个0-100之间的浮点数，找出前100个最大的，不考虑空间复杂度 算法题：一千万条数据找最大的前 100 个数据（每个数据都是 0-100 的浮点数），最差时间复杂度以及优...","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"https://yirufeng.top/notes/algo/g7iq3601/"}],["meta",{"property":"og:title","content":"大数与海量数据"}],["meta",{"property":"og:description","content":"大数相加（代码题） 布隆过滤器讲一下 海量数据处理：1T大文件，每一行是一个单词，请在4G内存条件下，统计出频次最高的10个单词 海量日志查询某一段时间内的记录 算法（口述）：一千万个0-100之间的浮点数，找出前100个最大的，不考虑空间复杂度 算法题：一千万条数据找最大的前 100 个数据（每个数据都是 0-100 的浮点数），最差时间复杂度以及优..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-13T13:36:39.000Z"}],["meta",{"property":"article:author","content":"yirufeng"}],["meta",{"property":"article:modified_time","content":"2024-05-13T13:36:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大数与海量数据\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-13T13:36:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yirufeng\\"}]}"]]},"headers":[{"level":2,"title":"大数相加（代码题）","slug":"大数相加-代码题","link":"#大数相加-代码题","children":[]},{"level":2,"title":"布隆过滤器讲一下","slug":"布隆过滤器讲一下","link":"#布隆过滤器讲一下","children":[]},{"level":2,"title":"海量数据处理：1T大文件，每一行是一个单词，请在4G内存条件下，统计出频次最高的10个单词","slug":"海量数据处理-1t大文件-每一行是一个单词-请在4g内存条件下-统计出频次最高的10个单词","link":"#海量数据处理-1t大文件-每一行是一个单词-请在4g内存条件下-统计出频次最高的10个单词","children":[]},{"level":2,"title":"海量日志查询某一段时间内的记录","slug":"海量日志查询某一段时间内的记录","link":"#海量日志查询某一段时间内的记录","children":[]},{"level":2,"title":"算法（口述）：一千万个0-100之间的浮点数，找出前100个最大的，不考虑空间复杂度","slug":"算法-口述-一千万个0-100之间的浮点数-找出前100个最大的-不考虑空间复杂度","link":"#算法-口述-一千万个0-100之间的浮点数-找出前100个最大的-不考虑空间复杂度","children":[]},{"level":2,"title":"算法题：一千万条数据找最大的前 100 个数据（每个数据都是 0-100 的浮点数），最差时间复杂度以及优化","slug":"算法题-一千万条数据找最大的前-100-个数据-每个数据都是-0-100-的浮点数-最差时间复杂度以及优化","link":"#算法题-一千万条数据找最大的前-100-个数据-每个数据都是-0-100-的浮点数-最差时间复杂度以及优化","children":[]},{"level":2,"title":"海量数字，范围都是 1～10000，怎么排序？","slug":"海量数字-范围都是-1-10000-怎么排序","link":"#海量数字-范围都是-1-10000-怎么排序","children":[]},{"level":2,"title":"算法题：千万级别的数据量，实现队列 FIFO，如何设计数据结构节省内存空间（数据+ 链表）","slug":"算法题-千万级别的数据量-实现队列-fifo-如何设计数据结构节省内存空间-数据-链表","link":"#算法题-千万级别的数据量-实现队列-fifo-如何设计数据结构节省内存空间-数据-链表","children":[]},{"level":2,"title":"提取两个海量 url 数据中的相同值，不准用 Hash 分治。","slug":"提取两个海量-url-数据中的相同值-不准用-hash-分治。","link":"#提取两个海量-url-数据中的相同值-不准用-hash-分治。","children":[]},{"level":2,"title":"一个上 T 的文本文件，里面很多字符串并且用空格分隔，找到不同的字符串数量","slug":"一个上-t-的文本文件-里面很多字符串并且用空格分隔-找到不同的字符串数量","link":"#一个上-t-的文本文件-里面很多字符串并且用空格分隔-找到不同的字符串数量","children":[]},{"level":2,"title":"100M 的内存，100G 的文件（每行只有一个单词），统计频率最高的 20 个单","slug":"_100m-的内存-100g-的文件-每行只有一个单词-统计频率最高的-20-个单","link":"#_100m-的内存-100g-的文件-每行只有一个单词-统计频率最高的-20-个单","children":[]},{"level":2,"title":"假如有一个文件，文件里有100万条url，请给出方法统计出现次数最高的前100条（思路：100组，每组前100条拿出来，归并）","slug":"假如有一个文件-文件里有100万条url-请给出方法统计出现次数最高的前100条-思路-100组-每组前100条拿出来-归并","link":"#假如有一个文件-文件里有100万条url-请给出方法统计出现次数最高的前100条-思路-100组-每组前100条拿出来-归并","children":[]}],"readingTime":{"minutes":1.12,"words":335},"git":{"updatedTime":1715607399000,"contributors":[{"name":"cvenwu","email":"yirufeng@foxmail.com","commits":2}]},"autoDesc":true,"filePathRelative":"notes/algo/大数与海量数据.md"}`);export{d as comp,p as data};
